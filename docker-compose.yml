version: "3.8"

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    restart: always
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    healthcheck:
      test: "echo stat | nc localhost 2181"
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - testNetwork

  broker:
    image: wurstmeister/kafka:latest
    restart: always
    container_name: broker
    ports:
      - "29092:29092" # Internal (for other services in Docker)
      - "9092:9092" # External (for local access)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--list",
          "--bootstrap-server",
          "broker:29092",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - testNetwork

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    restart: always
    ports:
      - "9308:9308"
    environment:
      KAFKA_SERVER: broker:29092
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - testNetwork

  topic-manager:
    image: python:3.9
    volumes:
      - ./manage_kafka_topics.py:/manage_kafka_topics.py
    entrypoint: ["python", "/manage_kafka_topics.py"]
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - testNetwork

  spark:
    image: bitnami/spark:latest
    restart: always
    environment:
      - SPARK_MODE=master
    ports:
      - "8080:8080"
    depends_on:
      - broker
    networks:
      - testNetwork

  minio:
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "admin"
      MINIO_ROOT_PASSWORD: "password"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - testNetwork

  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - testNetwork

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.6.0
    restart: always
    volumes:
      - ./dbt:/dbt
    depends_on:
      - postgres
    command: ["run"]
    networks:
      - testNetwork

  airflow:
    image: apache/airflow:2.6.1
    restart: always
    environment:
      AIRFLOW_CORE_EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    command: ["webserver"]
    networks:
      - testNetwork

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3001:3000"
    depends_on:
      - broker
    networks:
      - testNetwork

  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - testNetwork

networks:
  testNetwork:
    driver: bridge

volumes:
  minio_data:
  postgres_data:
